#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=5

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
server_name=$(ynh_app_setting_get --app=$app --key=server_name)
port=$(ynh_app_setting_get --app=$app --key=port)
whatsappbot=$(ynh_app_setting_get --app=$app --key=whatsappbot)
synapse_instance=$(ynh_app_setting_get --app=$app --key=synapse_instance)
app_service_registration_path=$(ynh_app_setting_get --app=$app --key=app_service_registration_path)
encryption=$(ynh_app_setting_get --app=$app --key=encryption)
botadmin=$(ynh_app_setting_get --app=$app --key=botadmin)
botusers=$(ynh_app_setting_get --app=$app --key=botusers)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
mautrix_version=$(ynh_app_setting_get --app=$app --key=mautrix_version)

ynh_print_OFF
mautrix_whatsapp_db_pwd=$(ynh_app_setting_get --app=$app --key=mautrix_whatsapp_db_pwd)
ynh_print_ON

#=================================================
# SET CONSTANTS
#=================================================

synapse_db_name="matrix_$synapse_instance"
whatsappbot_synapse_db_user="@$whatsappbot:$server_name"
mautrix_whatsapp_user=$app
mautrix_whatsapp_db_name=$app
mautrix_whatsapp_db_user=$app
mautrix_config_path="$final_path/config.yaml"
upstream_version=$(ynh_app_upstream_version)

#=================================================
# CHECK VERSION
#=================================================

### This helper will compare the version of the currently installed app and the version of the upstream package.
### $upgrade_type can have 2 different values
### - UPGRADE_APP if the upstream app version has changed
### - UPGRADE_PACKAGE if only the YunoHost package has changed
### ynh_check_app_version_changed will stop the upgrade if the app is up to date.
### UPGRADE_APP should be used to upgrade the core app only if there's an upgrade to do.
upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# If db_name doesn't exist, create it
#if [ -z "$mautrix_whatsapp_db_name" ]; then
#	mautrix_whatsapp_db_name=$(ynh_sanitize_dbid --db_name=$app)
#	ynh_app_setting_set --app=$app --key=db_name --value=$mautrix_whatsapp_db_name
#fi

# If final_path doesn't exist, create it
#if [ -z "$final_path" ]; then
#	final_path=/opt/yunohost/$app
#	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
#fi

#Migration from 0.1.5
#domain=$(ynh_app_setting_get --app $synapse_instance --key domain)
#ynh_app_setting_set --app=$app --key=domain --value=$domain

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=10

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="stop"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=2

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$final_path"
fi

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=100

ynh_install_app_dependencies $pkg_dependencies

if [ $encryption = true ]
then
ynh_install_extra_app_dependencies --repo="http://http.debian.net/debian buster-backports main" --package="libolm-dev"
fi

# TODO: check Go version and upgrade if needed
#if ! command -v /usr/local/go/bin/go &> /dev/null
#then
ynh_install_extra_app_dependencies --repo="http://http.debian.net/debian bullseye-backports main" --package="golang-go"
#if

# Migration from <=1.10.0 to >0.2.1
ynh_secure_remove --file="$final_path"/community.go
ynh_secure_remove --file="$final_path"/database/upgrades/2019-05-23-protoupgrade.go
ynh_secure_remove --file="$final_path"/database/upgrades/2019-05-16-message-delete-cascade.go
src_path="$final_path"_src
# Remove a directory securely
ynh_secure_remove --file="$src_path"
#export PATH=$PATH:$GO_PATH
#env_path=$PATH

src_path="$final_path"/src
mkdir -p $src_path
export GOPATH="$src_path"
export GOCACHE="$GOPATH"/.cache/go-build

#=================================================
# BUILD GO
#=================================================

# Build mautrix-whatsapp

pushd "$final_path" || ynh_die
       ynh_script_progression --message="Building the sources (it will take some time)..." --weight=6
	if [ $encryption = true ]
	then
	# Build with libolm3 end-to-bridge encryption
	ynh_exec_warn_less ./build.sh
	else
	# Build without end-to-bridge encryption
	ynh_exec_warn_less ./build.sh -tags nocrypto
	fi
popd || ynh_die

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=8

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$mautrix_whatsapp_user

#=================================================
# SPECIFIC UPGRADE
#=================================================
# ...
#=================================================

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================

### Verify the checksum of a file, stored by `ynh_store_file_checksum` in the install script.
### And create a backup of this file if the checksum is different. So the file will be backed up if the admin had modified it.
ynh_backup_if_checksum_is_different --file="$mautrix_config_path"
ynh_backup_if_checksum_is_different --file="$app_service_registration_path/$app.yaml"

#=================================================
# SET MAUTRIX-WHATSAPP CONFIG
#=================================================
ynh_script_progression --message="Configuring Mautrix-WhatsApp..." --weight=2

# Configure Mautrix-WhatsApp

#ynh_print_OFF
#ynh_replace_string --match_string=__MAUTRIX_WHATSAPP_DB_PWD__ --replace_string=$mautrix_whatsapp_db_pwd --target_file="$mautrix_config_path"
#ynh_print_ON

enable_relaybot="true"
relaybot_management_room="highwaytohell"
relaybot_invite="$botadmin"
log_format="log.log"
# Options: debug, info, warn, error, fatal
log_level="error"

ynh_add_config --template="../conf/config.yaml" --destination="$mautrix_config_path"


#=================================================
# REGISTER SYNAPSE APP-SERVICE
#=================================================
$final_path/mautrix-whatsapp -g -c $mautrix_config_path -r $app_service_registration_path/$app.yaml

#Add the path to the registration file (registration.yaml by default) to your synapse homeserver.yaml under app_service_config_files.
/opt/yunohost/matrix-$synapse_instance/update_synapse_for_appservice.sh \
    || ynh_die "Synapse can't restart with the appservice configuration"
# Handled by synapse: synapse_ynh adds all registration files added in $app_service_registration_path to the app_service_config_files list

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================

# Recalculate and store the checksum of the file for the next upgrade.
ynh_store_file_checksum --file="$mautrix_config_path"
ynh_store_file_checksum --file="$app_service_registration_path/$app.yaml"

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..." --weight=1

# Use logrotate to manage application logfile(s)
#ynh_use_logrotate --logfile "/var/log/$app/log.log"
#chown $mautrix_whatsapp_user:root -R /var/log/$app
# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Upgrading systemd configuration..." --weight=4

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions on app files
chown -R root: $final_path
chown $mautrix_whatsapp_user:root -R $final_path

#=================================================
# ADVERTISE SERVICE IN ADMIN PANEL
#=================================================
#yunohost service add $app --log "/var/log/$app/log.log"
# if using yunohost version 3.2 or more in the 'manifest.json', a description can be added
yunohost service add $app --description "$app daemon for bridging Whatsapp and Matrix messages" --log "/var/log/$app/log.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="start"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
