#!/bin/bash
source _common.sh
source /usr/share/yunohost/helpers
ynh_abort_if_errors

#=================================================
# SPECIFIC GETTERS FOR TOML SHORT KEY
#=================================================

get__botname() {
    botname=$(ynh_app_setting_get --app $app --key botname)
    echo "${botname}"
}

get__listuser() {
  existingUsers=$(grep -- "\".*: user" "$install_dir/config.yaml" | sed -r 's/: user//' | tr -d '[:blank:]' | sed '/^#/d' | tr -d '\"' | tr '\n' ',') | sed -r 's/,$//'

  cat <<EOF
"$existingUsers"
EOF
}

get__listrelay() {
  existingRelayUsers=$(grep -- "\".*: relay" "$install_dir/config.yaml" | sed -r 's/: relay//' | tr -d '[:blank:]' | sed '/^#/d' | tr -d '\"' | tr '\n' ',') | sed -r 's/,$//'

  cat <<EOF
"$existingRelayUsers"
EOF
}

get__listadmin() {
  existingAdmins=$(grep -- "\".*: admin" "$install_dir/config.yaml" | sed -r 's/: admin//' | tr -d '[:blank:]' | sed '/^#/d' | tr -d '\"' | tr '\n' ',') | sed -r 's/,$//'

  cat <<EOF
"$existingAdmins"
EOF
}

#=================================================
# SPECIFIC VALIDATORS FOR TOML SHORT KEYS
#=================================================

#=================================================
# SPECIFIC SETTERS FOR TOML SHORT KEYS
#=================================================

set__botname() {
    old_botname=$(ynh_app_setting_get --app $app --key botname)
    if [ "$botname" -eq "$old_botname" ] # Check to avoid updating botname when it's not needed.
    then
      return
    fi

    ynh_app_setting_set --app=$app --key=botname --value="$botname"
    synapse_instance=$(ynh_app_setting_get --app $app --key synapse_instance)

    sed -i "s/username:.*/username: $botname/" "$install_dir/config.yaml"
    "$install_dir/mautrix-whatsapp" -g -c "$install_dir/config.yaml" -r "/etc/matrix-$synapse_instance/app-service/$app.yaml"
    "/opt/yunohost/matrix-$synapse_instance/update_synapse_for_appservice.sh" || ynh_die --message="Synapse can't restart with the appservice configuration"
    chown -R "$app:$app" "$install_dir"
    ynh_store_file_checksum --file="/etc/matrix-$synapse_instance/app-service/$app.yaml"
    ynh_store_file_checksum --file="$install_dir/config.yaml"
}

set__permissions_in_conf() {
    # As sed is not non greddy (first match is last occurence) and escape word doesnt exist, 
    # to find two successif new line, we need to first replace \n\n by a non used char 
    # then execute our regex and finaly replace back the special char by \n\n
    # here i select the  ¿ as special caractere
    permissions_regex="s/\n\n/¿/g;s/permissionsi:[^¿]*¿/permissions:"
    
    # add users to the substitute regex
    readarray -td, arruser < <(echo ${listuser});
    
    for user in "${arruser[@]}"; do
	# add it to regex substitution part
        permissions_regex=${permissions_regex}"\n    \"${user}\": \"user\"";
    done;
    ;;

    # add relays to the substitute regex
    readarray -td, arrrelay < <(echo ${listrelay});
    
    for relay in "${arrrelay[@]}"; do
	# add it to regex substitution part
        permissions_regex=${permissions_regex}"\n    \"${relay}\": \"relay\"";
    done;
    ;;

    # add admins to the substitute regex
    readarray -td, arradmin < <(echo ${listadmin});
    
    for admin in "${arradmin[@]}"; do
	# add it to regex substitution part
        permissions_regex=${permissions_regex}"\n    \"${admin}\": \"admin\"";
    done;
    ;;

    #finalize the regex then apply the sed command
    permissions_regex=${permissions_regex}"¿/;s/¿/\n\n/g"
    sed -i -z -r "${permissions_regex}" "$final_path/config.yaml"

}

set__listuser() {
	set__permissions_in_conf;
	ynh_app_setting_set --app=$app --key=listuser --value="${listuser}"
}

set__listrelay() {
	set__permissions_in_conf;
	ynh_app_setting_set --app=$app --key=listrelay --value="${listrelay}"
}

set__listadmin() {
	set__permissions_in_conf;
	ynh_app_setting_set --app=$app --key=listadmin --value="${listadmin}"
}

ynh_app_config_run $1
